@Library('CI-shared-lib') _

pipeline {
    agent {
        label 'agent'
    }
    
    environment {
        BRANSH_NAME = 'master'
        GITHUB_CREDENTIALS_ID = 'general-github-credentials'
        GITHUB_URL = 'https://github.com/Ahemida96/CloudDevOpsProject.git'
        REGISTRY_USERNAME = "ahemida96"
        REGISTRY_CREDENTIALS_ID = 'docker-credentials'
        IMAGE_NAME = 'ivolve-app'
       
        scannerHome = tool 'sonar'

        MANIFEST_REPO= 'https://github.com/Ahemida96/argocd-manifest.git'
        MANIFEST_DIR = "k8s"
        MANIFEST_FILE = "deployment.yaml"

    }

    stages {

        stage('Clone Git') {
            steps {
                git branch: BRANSH_NAME,
                    credentialsId: GITHUB_CREDENTIALS_ID,
                    url: GITHUB_URL
            }
        }
        
        stage('Unit Test') {
            steps {
                script {
                    dir('web-app'){
                        UnitTest()
                    }
                }
            }
        }
        
        stage('SonarQube Analysis') {
            steps{
                dir('web-app') {
                    SonarqubeTest()
                }
            }
        }
        
        stage('Build Jar') {
            steps {
                dir('web-app'){
                    JavaBuild()
                }
            }
        }
        stage('Docker Build and Push') {
            steps {
                dir('web-app'){
                    Docker(IMAGE_NAME, REGISTRY_CREDENTIALS_ID)
                }
            }
        }
        stage('Update Manifest') {
            steps {
                ManifestUpdate(
                    image_name: IMAGE_NAME,
                    github_credentials: GITHUB_CREDENTIALS_ID,
                    manifestFile: MANIFEST_FILE,
                    manifestDir: MANIFEST_DIR,
                    email: "jenkins@example.com",
                    username: "jenkins",
                    dockerhub_username: REGISTRY_USERNAME,
                    manifest_repo: MANIFEST_REPO
                )
            }
        }
    }
    post {
        always {
            cleanWs()  // Clean workspace after build

        }
        success {
            echo "Build succeeded!"
        }
        failure {
            echo "Build failed!"
        }
    }
}